{
    "courses": [
        {
            "name": "Python Basics",
            "category": "Programming",
            "total_chapters": 4,
            "total_lectures": 12,
            "difficulty_level": "Beginner",
            "description": "Start your Python journey with variables, data types, and basic operations.",
            "videos": [
                {
                    "title": "Introduction to Python & Variables",
                    "url": "https://www.youtube.com/watch?v=rfscVS0vtbw",
                    "difficulty": "easy",
                    "intro_text": "Learn what Python is, how to write your first program, and how to use variables.",
                    "quizzes": [
                        {"question": "Which of these is a valid variable name in Python?", "options": ["2var", "my_var", "my-var"], "correct": "my_var", "difficulty": "easy"},
                        {"question": "What is the output of print(3 + 4)?", "options": ["7", "34", "'3+4'"], "correct": "7", "difficulty": "easy"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Simple Addition",
                            "description": "Write a function that returns the sum of two numbers.",
                            "difficulty": "easy",
                            "starter_code": "def add(a, b):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": [2, 3], "expected": 5},
                                {"input": [10, -2], "expected": 8}
                            ],
                            "hints": ["Use the + operator"]
                        }
                    ]
                },
                {
                    "title": "Data Types & Type Conversion",
                    "url": "https://www.youtube.com/watch?v=khKv-8q7YmY",
                    "difficulty": "easy",
                    "intro_text": "Explore Python's basic data types and how to convert between them.",
                    "quizzes": [
                        {"question": "What is the type of 3.14?", "options": ["int", "float", "str"], "correct": "float", "difficulty": "easy"},
                        {"question": "How do you convert a string '123' to an integer?", "options": ["int('123')", "str(123)", "float('123')"], "correct": "int('123')", "difficulty": "easy"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "String to Integer",
                            "description": "Write a function that converts a string to an integer.",
                            "difficulty": "easy",
                            "starter_code": "def str_to_int(s):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": "42", "expected": 42},
                                {"input": "0", "expected": 0}
                            ],
                            "hints": ["Use the int() function"]
                        }
                    ]
                },
                {
                    "title": "User Input & Output",
                    "url": "https://www.youtube.com/watch?v=8ext9G7xspg",
                    "difficulty": "easy",
                    "intro_text": "Learn how to get input from the user and display output.",
                    "quizzes": [
                        {"question": "Which function is used to get user input?", "options": ["input()", "print()", "read()"], "correct": "input()", "difficulty": "easy"},
                        {"question": "What does print('Hello') do?", "options": ["Displays Hello", "Gets input", "Nothing"], "correct": "Displays Hello", "difficulty": "easy"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Greeting",
                            "description": "Write a function that takes a name and returns 'Hello, <name>!'.",
                            "difficulty": "easy",
                            "starter_code": "def greet(name):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": "Alice", "expected": "Hello, Alice!"},
                                {"input": "Bob", "expected": "Hello, Bob!"}
                            ],
                            "hints": ["Use string formatting"]
                        }
                    ]
                }
            ]
        },
        {
            "name": "Control Flow in Python",
            "category": "Programming",
            "total_chapters": 4,
            "total_lectures": 12,
            "difficulty_level": "Beginner",
            "description": "Master if statements, loops, and logical operators in Python.",
            "videos": [
                {
                    "title": "If Statements & Comparisons",
                    "url": "https://www.youtube.com/watch?v=f4KOjWS_KZs",
                    "difficulty": "easy",
                    "intro_text": "Learn how to use if, elif, and else to control your program's flow.",
                    "quizzes": [
                        {"question": "What does '==' check for?", "options": ["Assignment", "Equality", "Inequality"], "correct": "Equality", "difficulty": "easy"},
                        {"question": "Which keyword starts a conditional block?", "options": ["if", "for", "while"], "correct": "if", "difficulty": "easy"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Even or Odd",
                            "description": "Write a function that returns 'Even' if a number is even, 'Odd' otherwise.",
                            "difficulty": "easy",
                            "starter_code": "def even_or_odd(n):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": 2, "expected": "Even"},
                                {"input": 7, "expected": "Odd"}
                            ],
                            "hints": ["Use the % operator"]
                        }
                    ]
                },
                {
                    "title": "For Loops & While Loops",
                    "url": "https://www.youtube.com/watch?v=6iF8Xb7Z3wQ",
                    "difficulty": "easy",
                    "intro_text": "Understand how to repeat actions using for and while loops.",
                    "quizzes": [
                        {"question": "Which loop is used when you know the number of iterations?", "options": ["for", "while", "do-while"], "correct": "for", "difficulty": "easy"},
                        {"question": "What does 'break' do in a loop?", "options": ["Exits the loop", "Skips iteration", "Repeats loop"], "correct": "Exits the loop", "difficulty": "easy"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Sum of Numbers",
                            "description": "Write a function that returns the sum of numbers from 1 to n.",
                            "difficulty": "easy",
                            "starter_code": "def sum_to_n(n):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": 5, "expected": 15},
                                {"input": 10, "expected": 55}
                            ],
                            "hints": ["Use a for loop"]
                        }
                    ]
                },
                {
                    "title": "Logical Operators & Nesting",
                    "url": "https://www.youtube.com/watch?v=VchuKL44s6E",
                    "difficulty": "easy",
                    "intro_text": "Combine conditions using and, or, not. Learn about nested statements.",
                    "quizzes": [
                        {"question": "What does 'and' do?", "options": ["Both must be True", "Either True", "Negates"], "correct": "Both must be True", "difficulty": "easy"},
                        {"question": "What is nesting?", "options": ["Loop in a loop", "If in an if", "Both"], "correct": "Both", "difficulty": "easy"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Check Range",
                            "description": "Write a function that returns True if a number is between 10 and 20 (inclusive).",
                            "difficulty": "easy",
                            "starter_code": "def in_range(n):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": 15, "expected": true},
                                {"input": 25, "expected": false}
                            ],
                            "hints": ["Use and operator"]
                        }
                    ]
                }
            ]
        },
        {
            "name": "Python Lists & Strings",
            "category": "Programming",
            "total_chapters": 4,
            "total_lectures": 12,
            "difficulty_level": "Beginner",
            "description": "Work with lists, strings, and their methods in Python.",
            "videos": [
                {
                    "title": "Lists & List Methods",
                    "url": "https://www.youtube.com/watch?v=ohCDWZgNIU0",
                    "difficulty": "easy",
                    "intro_text": "Learn how to create, access, and modify lists in Python.",
                    "quizzes": [
                        {"question": "How do you add an item to a list?", "options": ["add()", "append()", "insert()"], "correct": "append()", "difficulty": "easy"},
                        {"question": "What is the output of [1,2,3][:2]?", "options": ["[1]", "[1,2]", "[2,3]"], "correct": "[1,2]", "difficulty": "medium"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "List Reverser",
                            "description": "Write a function that returns a reversed copy of a list.",
                            "difficulty": "easy",
                            "starter_code": "def reverse_list(lst):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": [1,2,3], "expected": [3,2,1]},
                                {"input": [5,4,3], "expected": [3,4,5]}
                            ],
                            "hints": ["Use slicing"]
                        }
                    ]
                },
                {
                    "title": "String Basics & Methods",
                    "url": "https://www.youtube.com/watch?v=k9TUPpGqYTo",
                    "difficulty": "easy",
                    "intro_text": "Explore string creation, indexing, and common string methods.",
                    "quizzes": [
                        {"question": "What does 'hello'.upper() return?", "options": ["Hello", "HELLO", "hello"], "correct": "HELLO", "difficulty": "easy"},
                        {"question": "What does strip() do?", "options": ["Removes all spaces", "Removes leading/trailing whitespace", "Removes characters"], "correct": "Removes leading/trailing whitespace", "difficulty": "easy"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "String Joiner",
                            "description": "Write a function that joins a list of strings with a comma.",
                            "difficulty": "easy",
                            "starter_code": "def join_strings(lst):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": ["a","b","c"], "expected": "a,b,c"},
                                {"input": ["hello","world"], "expected": "hello,world"}
                            ],
                            "hints": ["Use ','.join(lst)"]
                        }
                    ]
                },
                {
                    "title": "String Slicing & Formatting",
                    "url": "https://www.youtube.com/watch?v=9Os0o3wzS_I",
                    "difficulty": "medium",
                    "intro_text": "Learn how to slice strings and format them using f-strings.",
                    "quizzes": [
                        {"question": "What is string slicing?", "options": ["Extracting parts of a string", "Joining strings", "Splitting strings"], "correct": "Extracting parts of a string", "difficulty": "medium"},
                        {"question": "How do you format a string with a variable?", "options": ["f''", "format()", "Both"], "correct": "Both", "difficulty": "medium"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Substring Extractor",
                            "description": "Write a function that returns the first 3 characters of a string.",
                            "difficulty": "easy",
                            "starter_code": "def first_three(s):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": "python", "expected": "pyt"},
                                {"input": "abc", "expected": "abc"}
                            ],
                            "hints": ["Use slicing"]
                        }
                    ]
                }
            ]
        },
        {
            "name": "Functions & Scope",
            "category": "Programming",
            "total_chapters": 4,
            "total_lectures": 12,
            "difficulty_level": "Intermediate",
            "description": "Understand how to write functions, use arguments, and manage scope in Python.",
            "videos": [
                {
                    "title": "Defining Functions & Arguments",
                    "url": "https://www.youtube.com/watch?v=9Os0o3wzS_I",
                    "difficulty": "medium",
                    "intro_text": "Learn how to define functions, use parameters, and return values.",
                    "quizzes": [
                        {"question": "Which keyword defines a function?", "options": ["func", "def", "function"], "correct": "def", "difficulty": "easy"},
                        {"question": "What does return do?", "options": ["Exits function", "Returns value", "Both"], "correct": "Both", "difficulty": "medium"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Multiply Function",
                            "description": "Write a function that multiplies two numbers.",
                            "difficulty": "easy",
                            "starter_code": "def multiply(a, b):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": [2, 3], "expected": 6},
                                {"input": [5, 0], "expected": 0}
                            ],
                            "hints": ["Use the * operator"]
                        }
                    ]
                },
                {
                    "title": "Default & Keyword Arguments",
                    "url": "https://www.youtube.com/watch?v=9Os0o3wzS_I",
                    "difficulty": "medium",
                    "intro_text": "Explore default values and keyword arguments in functions.",
                    "quizzes": [
                        {"question": "What is a default argument?", "options": ["A required argument", "A value used if not provided", "A function"], "correct": "A value used if not provided", "difficulty": "medium"},
                        {"question": "How do you call a function with a keyword argument?", "options": ["func(arg=val)", "func(val)", "func->val"], "correct": "func(arg=val)", "difficulty": "medium"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Greeting with Default",
                            "description": "Write a function that greets a user, defaulting to 'Guest' if no name is given.",
                            "difficulty": "easy",
                            "starter_code": "def greet(name='Guest'):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": "Alice", "expected": "Hello, Alice!"},
                                {"input": null, "expected": "Hello, Guest!"}
                            ],
                            "hints": ["Use default argument"]
                        }
                    ]
                },
                {
                    "title": "Variable Scope & Lifetime",
                    "url": "https://www.youtube.com/watch?v=QVdf0LgmICw",
                    "difficulty": "medium",
                    "intro_text": "Understand local and global variables, and how scope affects your code.",
                    "quizzes": [
                        {"question": "What is a local variable?", "options": ["Defined inside a function", "Defined outside", "Global"], "correct": "Defined inside a function", "difficulty": "medium"},
                        {"question": "What does global keyword do?", "options": ["Makes variable global", "Deletes variable", "Nothing"], "correct": "Makes variable global", "difficulty": "medium"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Counter with Global",
                            "description": "Write a function that increments a global counter variable.",
                            "difficulty": "medium",
                            "starter_code": "counter = 0\ndef increment():\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": null, "expected": 1}
                            ],
                            "hints": ["Use global keyword"]
                        }
                    ]
                }
            ]
        },
        {
            "name": "Object-Oriented Programming in Python",
            "category": "Programming",
            "total_chapters": 4,
            "total_lectures": 12,
            "difficulty_level": "Intermediate",
            "description": "Learn the basics of OOP: classes, objects, inheritance, and more.",
            "videos": [
                {
                    "title": "Classes & Objects",
                    "url": "https://www.youtube.com/watch?v=apACNr7DC_s",
                    "difficulty": "medium",
                    "intro_text": "Understand how to define classes and create objects in Python.",
                    "quizzes": [
                        {"question": "Which keyword defines a class?", "options": ["class", "object", "def"], "correct": "class", "difficulty": "easy"},
                        {"question": "How do you create an object?", "options": ["obj = MyClass()", "obj = MyClass", "obj.create()"], "correct": "obj = MyClass()", "difficulty": "easy"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Create a Class",
                            "description": "Write a class Person with attributes name and age.",
                            "difficulty": "medium",
                            "starter_code": "class Person:\n    def __init__(self, name, age):\n        # Your code here\n        pass",
                            "test_cases": [
                                {"input": ["Alice", 30], "expected": {"name": "Alice", "age": 30}}
                            ],
                            "hints": ["Use __init__"]
                        }
                    ]
                },
                {
                    "title": "Methods & Inheritance",
                    "url": "https://www.youtube.com/watch?v=RSl87lqOXDE",
                    "difficulty": "medium",
                    "intro_text": "Learn about instance methods and how to inherit from another class.",
                    "quizzes": [
                        {"question": "What is inheritance?", "options": ["Class from class", "Function from function", "Object from object"], "correct": "Class from class", "difficulty": "medium"},
                        {"question": "How do you call a parent method?", "options": ["super().method()", "parent.method()", "self.method()"], "correct": "super().method()", "difficulty": "medium"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Animal Inheritance",
                            "description": "Write a class Dog that inherits from Animal and adds a bark() method.",
                            "difficulty": "medium",
                            "starter_code": "class Animal:\n    def speak(self):\n        return '...'\n\nclass Dog(Animal):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": null, "expected": "bark"}
                            ],
                            "hints": ["Use inheritance"]
                        }
                    ]
                },
                {
                    "title": "Encapsulation & Properties",
                    "url": "https://www.youtube.com/watch?v=JeznW_7DlB0",
                    "difficulty": "medium",
                    "intro_text": "Understand encapsulation and how to use properties in Python.",
                    "quizzes": [
                        {"question": "What is encapsulation?", "options": ["Hiding data", "Showing data", "Deleting data"], "correct": "Hiding data", "difficulty": "medium"},
                        {"question": "What does @property do?", "options": ["Makes attribute read-only", "Deletes attribute", "Creates method"], "correct": "Makes attribute read-only", "difficulty": "medium"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Bank Account Property",
                            "description": "Write a class BankAccount with a balance property that can't be set directly.",
                            "difficulty": "medium",
                            "starter_code": "class BankAccount:\n    def __init__(self, balance):\n        self._balance = balance\n    @property\n    def balance(self):\n        # Your code here\n        pass",
                            "test_cases": [
                                {"input": 100, "expected": 100}
                            ],
                            "hints": ["Use @property"]
                        }
                    ]
                }
            ]
        },
        {
            "name": "Advanced Python Topics",
            "category": "Programming",
            "total_chapters": 4,
            "total_lectures": 12,
            "difficulty_level": "Advanced",
            "description": "Explore advanced Python concepts: modules, exceptions, file I/O, and more.",
            "videos": [
                {
                    "title": "Modules & Packages",
                    "url": "https://www.youtube.com/watch?v=CqvZ3vGoGs0",
                    "difficulty": "hard",
                    "intro_text": "Learn how to organize code using modules and packages.",
                    "quizzes": [
                        {"question": "How do you import a module?", "options": ["import module", "include module", "use module"], "correct": "import module", "difficulty": "medium"},
                        {"question": "What is __init__.py for?", "options": ["Package marker", "Main function", "Class definition"], "correct": "Package marker", "difficulty": "hard"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Create a Module",
                            "description": "Write a module math_utils.py with a function add(a, b).",
                            "difficulty": "hard",
                            "starter_code": "# math_utils.py\ndef add(a, b):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": [2, 3], "expected": 5}
                            ],
                            "hints": ["Define a function in a .py file"]
                        }
                    ]
                },
                {
                    "title": "Exception Handling",
                    "url": "https://www.youtube.com/watch?v=NIWwJbo-9_8",
                    "difficulty": "hard",
                    "intro_text": "Handle errors gracefully using try, except, and finally.",
                    "quizzes": [
                        {"question": "What does try-except do?", "options": ["Handles errors", "Ignores errors", "Raises errors"], "correct": "Handles errors", "difficulty": "medium"},
                        {"question": "What does finally do?", "options": ["Always runs", "Runs on error", "Never runs"], "correct": "Always runs", "difficulty": "hard"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Safe Division",
                            "description": "Write a function that divides two numbers and returns 'Error' if division by zero.",
                            "difficulty": "hard",
                            "starter_code": "def safe_divide(a, b):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": [10, 2], "expected": 5},
                                {"input": [5, 0], "expected": "Error"}
                            ],
                            "hints": ["Use try-except"]
                        }
                    ]
                },
                {
                    "title": "File I/O",
                    "url": "https://www.youtube.com/watch?v=Uh2ebFW8OYM",
                    "difficulty": "hard",
                    "intro_text": "Read from and write to files in Python.",
                    "quizzes": [
                        {"question": "Which function opens a file?", "options": ["open()", "file()", "read()"], "correct": "open()", "difficulty": "medium"},
                        {"question": "What does 'w' mode do?", "options": ["Write", "Read", "Append"], "correct": "Write", "difficulty": "medium"}
                    ],
                    "coding_exercises": [
                        {
                            "title": "Write to File",
                            "description": "Write a function that writes a string to a file named 'output.txt'.",
                            "difficulty": "hard",
                            "starter_code": "def write_to_file(text):\n    # Your code here\n    pass",
                            "test_cases": [
                                {"input": "hello", "expected": true}
                            ],
                            "hints": ["Use open() with 'w' mode"]
                        }
                    ]
                }
            ]
        }
    ]
}
  
  